<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="salaba.dao.MemberDao">

  <resultMap id="MemberMap" type="Member">
    <id column="member_no" property="no"/>
    <result column="email" property="email"/>
    <result column="name" property="name"/>
    <result column="nickname" property="nickname"/>
    <result column="birthday" property="birthday"/>
    <result column="tel_no" property="telNo"/>
    <result column="nation_no" property="nationNo"/>
    <result column="address" property="address"/>
    <result column="sex" property="sex"/>
    <result column="photo" property="photo"/>
    <result column="state" property="state"/>

    <!-- grade 정보 가져오기 -->
    <association property="grade" javaType="Grade">
      <id column="grade_no" property="gradeNo"/>
      <result column="grade_name" property="gradeName"/>
    </association>
    <!--  테마 정보 가져오기  -->
    <collection property="themes" resultMap="themeMap"/>
    <!--  포인트 정보 가져오기  -->
    <collection property="pointHistory" resultMap="PointMap"/>
  </resultMap>

  <resultMap id="themeMap" type="salaba.vo.rental_home.Theme">
    <id column="theme_no" property="themeNo"/>
    <result column="theme_name" property="themeName"/>
  </resultMap>

  <resultMap id="NationMap" type="Nation"><!--국가선택 준비-->
    <id column="nation_no" property="nationNo"/>
    <result column="nation_name" property="nationName"/>
  </resultMap>

  <resultMap id="PointMap" type="PointHistory">
    <result column="save_content" property="saveContent"/>
    <result column="save_point" property="savePoint"/>
    <result column="save_date" property="saveDate"/>
  </resultMap>

  <insert id="addMember" parameterType="Member"><!--회원가입>-->
    insert into member(
      name,
      nickname,
      birthday,
      email,
      password)
    values(
      #{name},
      #{nickname},
      #{birthday},
      #{email},
      sha2(#{password},256))
  </insert>

  <!-- 국가 전체 검색 -->
  <select id="getNation" resultMap="NationMap" >
    select
      nation_no,
      nation_name
    from
      nation
    order by nation_no
  </select>

  <!-- 내정보 수정 -->
  <update id="updateUserInfo" parameterType="Member">
    update
      member
    set
      name=#{name},
      nickname=#{nickname},
      tel_no=#{telNo},
      sex=#{sex},
      address=#{address},
      photo=#{photo},
      nation_no=#{nationNo}
    where
      member_no=#{no}
  </update>

  <!-- 닉네임 중복체크 -->
  <select id="checkNickname" parameterType="String">
    select
      count(*)
    from
      member
    where
      nickname=#{nickName}
  </select>

  <!-- 이메일 중복 체크 -->
  <select id="checkEmail" parameterType="String">
    select
      count(*)
    from
      member
    where
      email = #{email}
  </select>

  <!-- 회원탈퇴 -->
  <update id="updateMemberWithdrawal" parameterType="int">
    update
      member
    set
      state='1',
      exit_date=now()
    where
      member_no=#{memberNo}
  </update>

  <!-- 로그인 -->
  <select id="selectUserInfoForLogin" resultMap="MemberMap">
    select
      t1.member_no,
      t1.email,
      t1.name,
      t1.nickname,
      t1.birthday,
      t1.tel_no,
      t1.nation_no,
      t1.address,
      t1.sex,
      t1.photo,
      t1.state,
      t2.grade_name,
      t3.theme_no,
      t4.theme_name,
      t5.save_content,
      t5.save_point,
      t5.save_date
    from
      member t1
      inner join grade t2 on t2.grade_no = t1.grade_no
      left outer join member_preference t3 on t3.member_no = t1.member_no
      left outer join theme t4 on t4.theme_no = t3.theme_no
      left outer join point_history t5 on t5.member_no = t1.member_no
    where
      email= #{email}
      and password=sha2(#{password},256)
  </select>

  <!-- 개인정보 업데이트 후 세션 갱신용 -->
  <select id="selectUserInfoForUpdateSession" resultMap="MemberMap">
    select
      t1.member_no,
      t1.email,
      t1.name,
      t1.nickname,
      t1.birthday,
      t1.tel_no,
      t1.nation_no,
      t1.address,
      t1.sex,
      t1.photo,
      t1.state,
      t2.grade_name,
      t3.theme_no,
      t4.theme_name,
      t5.save_content,
      t5.save_point,
      t5.save_date
    from
      member t1
      inner join grade t2 on t2.grade_no = t1.grade_no
      left outer join member_preference t3 on t3.member_no = t1.member_no
      left outer join theme t4 on t4.theme_no = t3.theme_no
      left outer join point_history t5 on t5.member_no = t1.member_no
    where
      t1.member_no = #{memberNo}
  </select>

  <select id="selectEmailForGoogle" resultMap="MemberMap">
    select
      t1.member_no,
      t1.email,
      t1.name,
      t1.nickname,
      t1.birthday,
      t1.tel_no,
      t1.nation_no,
      t1.address,
      t1.sex,
      t1.photo,
      t1.state,
      t2.grade_name,
      t3.theme_no,
      t4.theme_name,
      t5.save_content,
      t5.save_point,
      t5.save_date
    from
      member t1
      inner join grade t2 on t2.grade_no = t1.grade_no
      left outer join member_preference t3 on t3.member_no = t1.member_no
      left outer join theme t4 on t4.theme_no = t3.theme_no
      left outer join point_history t5 on t5.member_no = t1.member_no
    where
      email= #{email}
  </select>

  <!-- 이메일 찾기 -->
  <select id="findEmail" resultMap="MemberMap">
    select
      email,
      name
    from
      member
    where
      name= #{name}
      and birthday=#{birthday}
  </select>

  <!-- 비밀번호 찾기 -->
  <select id="findPassword" resultMap="MemberMap">
    select
      member_no
    from
      member
    where
      email= #{email}
      and name= #{name}
  </select>

  <!--비밀번호 변경 -->
  <update id="changePasswordSave" parameterType="Member">
    update
      member
    set
      password = sha2(#{password},256),
      state = case when state = '4' then '0' else state end
    where
      member_no=#{no}
  </update>

  <!-- 비밀번호 확인 -->
  <select id="checkPassword" resultType="int">
    select
      count(*)
    from
      member
    where
      member_no=#{no}
      and password = sha2(#{password},256)
  </select>

  <insert id="insertPreference" parameterType="Member">
    insert into member_preference
    (member_no,theme_no)
    values
    <foreach collection="themes" item="item" separator=",">
      (
      #{no},
      #{item.themeNo}
      )
    </foreach>
  </insert>

  <delete id="deletePreference" parameterType="int">
    delete
    from
      member_preference
    where
      member_no = #{no}
  </delete>

  <select id="boardStateCheck" resultType="String">
    select
      state
    from
      board
    where board_no = #{boardNo}
      and board_category_no = #{categoryNo}
  </select>

</mapper>